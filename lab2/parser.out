Grammar:

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> <empty>
Rule 3     instructions_opt -> instructions
Rule 4     instructions -> instruction instructions
Rule 5     instructions -> instruction
Rule 6     instruction -> FOR var = range instruction
Rule 7     instruction -> WHILE ( condition ) instruction
Rule 8     instruction -> IF ( condition ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 9     instruction -> IF ( condition ) instruction  [precedence=nonassoc, level=1]
Rule 10    instruction -> { instructions }
Rule 11    instruction -> statement ;
Rule 12    instruction -> assignment ;
Rule 13    range -> expression : expression
Rule 14    condition -> expression > expression  [precedence=nonassoc, level=4]
Rule 15    condition -> expression < expression  [precedence=nonassoc, level=4]
Rule 16    condition -> expression GREATER_EQUAL expression  [precedence=nonassoc, level=4]
Rule 17    condition -> expression LESS_EQUAL expression  [precedence=nonassoc, level=4]
Rule 18    condition -> expression NOT_EQUAL expression  [precedence=nonassoc, level=4]
Rule 19    condition -> expression EQUAL expression  [precedence=nonassoc, level=4]
Rule 20    assignment_op -> =
Rule 21    assignment_op -> ADDASSIGN  [precedence=right, level=3]
Rule 22    assignment_op -> SUBASSIGN  [precedence=right, level=3]
Rule 23    assignment_op -> DIVASSIGN  [precedence=right, level=3]
Rule 24    assignment_op -> MULASSIGN  [precedence=right, level=3]
Rule 25    assignment -> vector_element assignment_op expression
Rule 26    assignment -> matrix_element assignment_op expression
Rule 27    assignment -> var assignment_op expression
Rule 28    matrix_function -> matrix_function_name ( INTNUM )
Rule 29    matrix_function_name -> ZEROS
Rule 30    matrix_function_name -> ONES
Rule 31    matrix_function_name -> EYE
Rule 32    matrix -> [ vectors ]
Rule 33    vectors -> vector
Rule 34    vectors -> vectors , vector
Rule 35    vector -> [ variables ]
Rule 36    variables -> variable
Rule 37    variables -> variables , variable
Rule 38    variable -> element
Rule 39    variable -> var
Rule 40    variable -> number
Rule 41    element -> matrix_element
Rule 42    element -> vector_element
Rule 43    vector_element -> ID [ INTNUM ]
Rule 44    matrix_element -> ID [ INTNUM , INTNUM ]
Rule 45    var -> ID
Rule 46    number -> FLOAT
Rule 47    number -> INTNUM
Rule 48    string -> STRING
Rule 49    expression -> vector_element
Rule 50    expression -> matrix_element
Rule 51    expression -> transposition
Rule 52    expression -> uminus
Rule 53    expression -> matrix_function
Rule 54    expression -> matrix
Rule 55    expression -> num_expression
Rule 56    expression -> expression DOTDIV expression  [precedence=left, level=8]
Rule 57    expression -> expression DOTMUL expression  [precedence=left, level=8]
Rule 58    expression -> expression DOTSUB expression  [precedence=left, level=6]
Rule 59    expression -> expression DOTADD expression  [precedence=left, level=6]
Rule 60    expression -> expression / expression  [precedence=left, level=7]
Rule 61    expression -> expression * expression  [precedence=left, level=7]
Rule 62    expression -> expression - expression  [precedence=left, level=5]
Rule 63    expression -> expression + expression  [precedence=left, level=5]
Rule 64    num_expression -> var
Rule 65    num_expression -> number
Rule 66    uminus -> - expression  [precedence=right, level=9]
Rule 67    transposition -> expression '  [precedence=left, level=10]
Rule 68    statement -> PRINT print_vals
Rule 69    statement -> RETURN expression
Rule 70    statement -> CONTINUE
Rule 71    statement -> BREAK
Rule 72    print_vals -> print_val
Rule 73    print_vals -> print_vals , print_val
Rule 74    print_val -> expression
Rule 75    print_val -> string

Terminals, with rules where they appear:

'                    : 67
(                    : 7 8 9 28
)                    : 7 8 9 28
*                    : 61
+                    : 63
,                    : 34 37 44 73
-                    : 62 66
/                    : 60
:                    : 13
;                    : 11 12
<                    : 15
=                    : 6 20
>                    : 14
ADDASSIGN            : 21
BREAK                : 71
CONTINUE             : 70
DIVASSIGN            : 23
DOTADD               : 59
DOTDIV               : 56
DOTMUL               : 57
DOTSUB               : 58
ELSE                 : 8
EQUAL                : 19
EYE                  : 31
FLOAT                : 46
FOR                  : 6
GREATER_EQUAL        : 16
ID                   : 43 44 45
IF                   : 8 9
INTNUM               : 28 43 44 44 47
LESS_EQUAL           : 17
MULASSIGN            : 24
NOT_EQUAL            : 18
ONES                 : 30
PRINT                : 68
RETURN               : 69
STRING               : 48
SUBASSIGN            : 22
WHILE                : 7
ZEROS                : 29
[                    : 32 35 43 44
]                    : 32 35 43 44
error                : 
{                    : 10
}                    : 10

Nonterminals, with rules where they appear:

assignment           : 12
assignment_op        : 25 26 27
condition            : 7 8 9
element              : 38
expression           : 13 13 14 14 15 15 16 16 17 17 18 18 19 19 25 26 27 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 66 67 69 74
instruction          : 4 5 6 7 8 8 9
instructions         : 3 4 10
instructions_opt     : 1
matrix               : 54
matrix_element       : 26 41 50
matrix_function      : 53
matrix_function_name : 28
num_expression       : 55
number               : 40 65
print_val            : 72 73
print_vals           : 68 73
program              : 0
range                : 6
statement            : 11
string               : 75
transposition        : 51
uminus               : 52
var                  : 6 27 39 64
variable             : 36 37
variables            : 35 37
vector               : 33 34
vector_element       : 25 42 49
vectors              : 32 34


state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> .
    (3) instructions_opt -> . instructions
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    $end            reduce using rule 2 (instructions_opt -> .)
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 1

    (0) S' -> program .


state 2

    (1) program -> instructions_opt .
    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (3) instructions_opt -> instructions .
    $end            reduce using rule 3 (instructions_opt -> instructions .)


state 4

    (4) instructions -> instruction . instructions
    (5) instructions -> instruction .
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 4
    instructions                   shift and go to state 19
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 5

    (6) instruction -> FOR . var = range instruction
    (45) var -> . ID
    ID              shift and go to state 21

    var                            shift and go to state 20

state 6

    (27) assignment -> var . assignment_op expression
    (20) assignment_op -> . =
    (21) assignment_op -> . ADDASSIGN
    (22) assignment_op -> . SUBASSIGN
    (23) assignment_op -> . DIVASSIGN
    (24) assignment_op -> . MULASSIGN
    =               shift and go to state 23
    ADDASSIGN       shift and go to state 24
    SUBASSIGN       shift and go to state 25
    DIVASSIGN       shift and go to state 26
    MULASSIGN       shift and go to state 27

    assignment_op                  shift and go to state 22

state 7

    (7) instruction -> WHILE . ( condition ) instruction
    (               shift and go to state 28


state 8

    (8) instruction -> IF . ( condition ) instruction ELSE instruction
    (9) instruction -> IF . ( condition ) instruction
    (               shift and go to state 29


state 9

    (10) instruction -> { . instructions }
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    instructions                   shift and go to state 30
    instruction                    shift and go to state 4
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 10

    (11) instruction -> statement . ;
    ;               shift and go to state 31


state 11

    (12) instruction -> assignment . ;
    ;               shift and go to state 32


state 12

    (68) statement -> PRINT . print_vals
    (72) print_vals -> . print_val
    (73) print_vals -> . print_vals , print_val
    (74) print_val -> . expression
    (75) print_val -> . string
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (48) string -> . STRING
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    STRING          shift and go to state 45
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    print_vals                     shift and go to state 33
    print_val                      shift and go to state 34
    expression                     shift and go to state 35
    string                         shift and go to state 36
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 13

    (69) statement -> RETURN . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 55
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 14

    (70) statement -> CONTINUE .
    ;               reduce using rule 70 (statement -> CONTINUE .)


state 15

    (71) statement -> BREAK .
    ;               reduce using rule 71 (statement -> BREAK .)


state 16

    (25) assignment -> vector_element . assignment_op expression
    (20) assignment_op -> . =
    (21) assignment_op -> . ADDASSIGN
    (22) assignment_op -> . SUBASSIGN
    (23) assignment_op -> . DIVASSIGN
    (24) assignment_op -> . MULASSIGN
    =               shift and go to state 23
    ADDASSIGN       shift and go to state 24
    SUBASSIGN       shift and go to state 25
    DIVASSIGN       shift and go to state 26
    MULASSIGN       shift and go to state 27

    assignment_op                  shift and go to state 56

state 17

    (26) assignment -> matrix_element . assignment_op expression
    (20) assignment_op -> . =
    (21) assignment_op -> . ADDASSIGN
    (22) assignment_op -> . SUBASSIGN
    (23) assignment_op -> . DIVASSIGN
    (24) assignment_op -> . MULASSIGN
    =               shift and go to state 23
    ADDASSIGN       shift and go to state 24
    SUBASSIGN       shift and go to state 25
    DIVASSIGN       shift and go to state 26
    MULASSIGN       shift and go to state 27

    assignment_op                  shift and go to state 57

state 18

    (43) vector_element -> ID . [ INTNUM ]
    (44) matrix_element -> ID . [ INTNUM , INTNUM ]
    (45) var -> ID .
    [               shift and go to state 58
    =               reduce using rule 45 (var -> ID .)
    ADDASSIGN       reduce using rule 45 (var -> ID .)
    SUBASSIGN       reduce using rule 45 (var -> ID .)
    DIVASSIGN       reduce using rule 45 (var -> ID .)
    MULASSIGN       reduce using rule 45 (var -> ID .)
    DOTDIV          reduce using rule 45 (var -> ID .)
    DOTMUL          reduce using rule 45 (var -> ID .)
    DOTSUB          reduce using rule 45 (var -> ID .)
    DOTADD          reduce using rule 45 (var -> ID .)
    /               reduce using rule 45 (var -> ID .)
    *               reduce using rule 45 (var -> ID .)
    -               reduce using rule 45 (var -> ID .)
    +               reduce using rule 45 (var -> ID .)
    '               reduce using rule 45 (var -> ID .)
    ,               reduce using rule 45 (var -> ID .)
    ;               reduce using rule 45 (var -> ID .)
    >               reduce using rule 45 (var -> ID .)
    <               reduce using rule 45 (var -> ID .)
    GREATER_EQUAL   reduce using rule 45 (var -> ID .)
    LESS_EQUAL      reduce using rule 45 (var -> ID .)
    NOT_EQUAL       reduce using rule 45 (var -> ID .)
    EQUAL           reduce using rule 45 (var -> ID .)
    :               reduce using rule 45 (var -> ID .)
    )               reduce using rule 45 (var -> ID .)
    FOR             reduce using rule 45 (var -> ID .)
    WHILE           reduce using rule 45 (var -> ID .)
    IF              reduce using rule 45 (var -> ID .)
    {               reduce using rule 45 (var -> ID .)
    PRINT           reduce using rule 45 (var -> ID .)
    RETURN          reduce using rule 45 (var -> ID .)
    CONTINUE        reduce using rule 45 (var -> ID .)
    BREAK           reduce using rule 45 (var -> ID .)
    ID              reduce using rule 45 (var -> ID .)


state 19

    (4) instructions -> instruction instructions .
    $end            reduce using rule 4 (instructions -> instruction instructions .)
    }               reduce using rule 4 (instructions -> instruction instructions .)


state 20

    (6) instruction -> FOR var . = range instruction
    =               shift and go to state 59


state 21

    (45) var -> ID .
    =               reduce using rule 45 (var -> ID .)


state 22

    (27) assignment -> var assignment_op . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    var                            shift and go to state 49
    expression                     shift and go to state 60
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    number                         shift and go to state 50

state 23

    (20) assignment_op -> = .
    ID              reduce using rule 20 (assignment_op -> = .)
    -               reduce using rule 20 (assignment_op -> = .)
    [               reduce using rule 20 (assignment_op -> = .)
    ZEROS           reduce using rule 20 (assignment_op -> = .)
    ONES            reduce using rule 20 (assignment_op -> = .)
    EYE             reduce using rule 20 (assignment_op -> = .)
    FLOAT           reduce using rule 20 (assignment_op -> = .)
    INTNUM          reduce using rule 20 (assignment_op -> = .)


state 24

    (21) assignment_op -> ADDASSIGN .
    ID              reduce using rule 21 (assignment_op -> ADDASSIGN .)
    -               reduce using rule 21 (assignment_op -> ADDASSIGN .)
    [               reduce using rule 21 (assignment_op -> ADDASSIGN .)
    ZEROS           reduce using rule 21 (assignment_op -> ADDASSIGN .)
    ONES            reduce using rule 21 (assignment_op -> ADDASSIGN .)
    EYE             reduce using rule 21 (assignment_op -> ADDASSIGN .)
    FLOAT           reduce using rule 21 (assignment_op -> ADDASSIGN .)
    INTNUM          reduce using rule 21 (assignment_op -> ADDASSIGN .)


state 25

    (22) assignment_op -> SUBASSIGN .
    ID              reduce using rule 22 (assignment_op -> SUBASSIGN .)
    -               reduce using rule 22 (assignment_op -> SUBASSIGN .)
    [               reduce using rule 22 (assignment_op -> SUBASSIGN .)
    ZEROS           reduce using rule 22 (assignment_op -> SUBASSIGN .)
    ONES            reduce using rule 22 (assignment_op -> SUBASSIGN .)
    EYE             reduce using rule 22 (assignment_op -> SUBASSIGN .)
    FLOAT           reduce using rule 22 (assignment_op -> SUBASSIGN .)
    INTNUM          reduce using rule 22 (assignment_op -> SUBASSIGN .)


state 26

    (23) assignment_op -> DIVASSIGN .
    ID              reduce using rule 23 (assignment_op -> DIVASSIGN .)
    -               reduce using rule 23 (assignment_op -> DIVASSIGN .)
    [               reduce using rule 23 (assignment_op -> DIVASSIGN .)
    ZEROS           reduce using rule 23 (assignment_op -> DIVASSIGN .)
    ONES            reduce using rule 23 (assignment_op -> DIVASSIGN .)
    EYE             reduce using rule 23 (assignment_op -> DIVASSIGN .)
    FLOAT           reduce using rule 23 (assignment_op -> DIVASSIGN .)
    INTNUM          reduce using rule 23 (assignment_op -> DIVASSIGN .)


state 27

    (24) assignment_op -> MULASSIGN .
    ID              reduce using rule 24 (assignment_op -> MULASSIGN .)
    -               reduce using rule 24 (assignment_op -> MULASSIGN .)
    [               reduce using rule 24 (assignment_op -> MULASSIGN .)
    ZEROS           reduce using rule 24 (assignment_op -> MULASSIGN .)
    ONES            reduce using rule 24 (assignment_op -> MULASSIGN .)
    EYE             reduce using rule 24 (assignment_op -> MULASSIGN .)
    FLOAT           reduce using rule 24 (assignment_op -> MULASSIGN .)
    INTNUM          reduce using rule 24 (assignment_op -> MULASSIGN .)


state 28

    (7) instruction -> WHILE ( . condition ) instruction
    (14) condition -> . expression > expression
    (15) condition -> . expression < expression
    (16) condition -> . expression GREATER_EQUAL expression
    (17) condition -> . expression LESS_EQUAL expression
    (18) condition -> . expression NOT_EQUAL expression
    (19) condition -> . expression EQUAL expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    condition                      shift and go to state 61
    expression                     shift and go to state 62
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 29

    (8) instruction -> IF ( . condition ) instruction ELSE instruction
    (9) instruction -> IF ( . condition ) instruction
    (14) condition -> . expression > expression
    (15) condition -> . expression < expression
    (16) condition -> . expression GREATER_EQUAL expression
    (17) condition -> . expression LESS_EQUAL expression
    (18) condition -> . expression NOT_EQUAL expression
    (19) condition -> . expression EQUAL expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    condition                      shift and go to state 63
    expression                     shift and go to state 62
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 30

    (10) instruction -> { instructions . }
    }               shift and go to state 64


state 31

    (11) instruction -> statement ; .
    FOR             reduce using rule 11 (instruction -> statement ; .)
    WHILE           reduce using rule 11 (instruction -> statement ; .)
    IF              reduce using rule 11 (instruction -> statement ; .)
    {               reduce using rule 11 (instruction -> statement ; .)
    PRINT           reduce using rule 11 (instruction -> statement ; .)
    RETURN          reduce using rule 11 (instruction -> statement ; .)
    CONTINUE        reduce using rule 11 (instruction -> statement ; .)
    BREAK           reduce using rule 11 (instruction -> statement ; .)
    ID              reduce using rule 11 (instruction -> statement ; .)
    $end            reduce using rule 11 (instruction -> statement ; .)
    }               reduce using rule 11 (instruction -> statement ; .)
    ELSE            reduce using rule 11 (instruction -> statement ; .)


state 32

    (12) instruction -> assignment ; .
    FOR             reduce using rule 12 (instruction -> assignment ; .)
    WHILE           reduce using rule 12 (instruction -> assignment ; .)
    IF              reduce using rule 12 (instruction -> assignment ; .)
    {               reduce using rule 12 (instruction -> assignment ; .)
    PRINT           reduce using rule 12 (instruction -> assignment ; .)
    RETURN          reduce using rule 12 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 12 (instruction -> assignment ; .)
    BREAK           reduce using rule 12 (instruction -> assignment ; .)
    ID              reduce using rule 12 (instruction -> assignment ; .)
    $end            reduce using rule 12 (instruction -> assignment ; .)
    }               reduce using rule 12 (instruction -> assignment ; .)
    ELSE            reduce using rule 12 (instruction -> assignment ; .)


state 33

    (68) statement -> PRINT print_vals .
    (73) print_vals -> print_vals . , print_val
    ;               reduce using rule 68 (statement -> PRINT print_vals .)
    ,               shift and go to state 65


state 34

    (72) print_vals -> print_val .
    ,               reduce using rule 72 (print_vals -> print_val .)
    ;               reduce using rule 72 (print_vals -> print_val .)


state 35

    (74) print_val -> expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    ,               reduce using rule 74 (print_val -> expression .)
    ;               reduce using rule 74 (print_val -> expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 36

    (75) print_val -> string .
    ,               reduce using rule 75 (print_val -> string .)
    ;               reduce using rule 75 (print_val -> string .)


state 37

    (49) expression -> vector_element .
    DOTDIV          reduce using rule 49 (expression -> vector_element .)
    DOTMUL          reduce using rule 49 (expression -> vector_element .)
    DOTSUB          reduce using rule 49 (expression -> vector_element .)
    DOTADD          reduce using rule 49 (expression -> vector_element .)
    /               reduce using rule 49 (expression -> vector_element .)
    *               reduce using rule 49 (expression -> vector_element .)
    -               reduce using rule 49 (expression -> vector_element .)
    +               reduce using rule 49 (expression -> vector_element .)
    '               reduce using rule 49 (expression -> vector_element .)
    ,               reduce using rule 49 (expression -> vector_element .)
    ;               reduce using rule 49 (expression -> vector_element .)
    >               reduce using rule 49 (expression -> vector_element .)
    <               reduce using rule 49 (expression -> vector_element .)
    GREATER_EQUAL   reduce using rule 49 (expression -> vector_element .)
    LESS_EQUAL      reduce using rule 49 (expression -> vector_element .)
    NOT_EQUAL       reduce using rule 49 (expression -> vector_element .)
    EQUAL           reduce using rule 49 (expression -> vector_element .)
    :               reduce using rule 49 (expression -> vector_element .)
    )               reduce using rule 49 (expression -> vector_element .)
    FOR             reduce using rule 49 (expression -> vector_element .)
    WHILE           reduce using rule 49 (expression -> vector_element .)
    IF              reduce using rule 49 (expression -> vector_element .)
    {               reduce using rule 49 (expression -> vector_element .)
    PRINT           reduce using rule 49 (expression -> vector_element .)
    RETURN          reduce using rule 49 (expression -> vector_element .)
    CONTINUE        reduce using rule 49 (expression -> vector_element .)
    BREAK           reduce using rule 49 (expression -> vector_element .)
    ID              reduce using rule 49 (expression -> vector_element .)


state 38

    (50) expression -> matrix_element .
    DOTDIV          reduce using rule 50 (expression -> matrix_element .)
    DOTMUL          reduce using rule 50 (expression -> matrix_element .)
    DOTSUB          reduce using rule 50 (expression -> matrix_element .)
    DOTADD          reduce using rule 50 (expression -> matrix_element .)
    /               reduce using rule 50 (expression -> matrix_element .)
    *               reduce using rule 50 (expression -> matrix_element .)
    -               reduce using rule 50 (expression -> matrix_element .)
    +               reduce using rule 50 (expression -> matrix_element .)
    '               reduce using rule 50 (expression -> matrix_element .)
    ,               reduce using rule 50 (expression -> matrix_element .)
    ;               reduce using rule 50 (expression -> matrix_element .)
    >               reduce using rule 50 (expression -> matrix_element .)
    <               reduce using rule 50 (expression -> matrix_element .)
    GREATER_EQUAL   reduce using rule 50 (expression -> matrix_element .)
    LESS_EQUAL      reduce using rule 50 (expression -> matrix_element .)
    NOT_EQUAL       reduce using rule 50 (expression -> matrix_element .)
    EQUAL           reduce using rule 50 (expression -> matrix_element .)
    :               reduce using rule 50 (expression -> matrix_element .)
    )               reduce using rule 50 (expression -> matrix_element .)
    FOR             reduce using rule 50 (expression -> matrix_element .)
    WHILE           reduce using rule 50 (expression -> matrix_element .)
    IF              reduce using rule 50 (expression -> matrix_element .)
    {               reduce using rule 50 (expression -> matrix_element .)
    PRINT           reduce using rule 50 (expression -> matrix_element .)
    RETURN          reduce using rule 50 (expression -> matrix_element .)
    CONTINUE        reduce using rule 50 (expression -> matrix_element .)
    BREAK           reduce using rule 50 (expression -> matrix_element .)
    ID              reduce using rule 50 (expression -> matrix_element .)


state 39

    (51) expression -> transposition .
    DOTDIV          reduce using rule 51 (expression -> transposition .)
    DOTMUL          reduce using rule 51 (expression -> transposition .)
    DOTSUB          reduce using rule 51 (expression -> transposition .)
    DOTADD          reduce using rule 51 (expression -> transposition .)
    /               reduce using rule 51 (expression -> transposition .)
    *               reduce using rule 51 (expression -> transposition .)
    -               reduce using rule 51 (expression -> transposition .)
    +               reduce using rule 51 (expression -> transposition .)
    '               reduce using rule 51 (expression -> transposition .)
    ,               reduce using rule 51 (expression -> transposition .)
    ;               reduce using rule 51 (expression -> transposition .)
    >               reduce using rule 51 (expression -> transposition .)
    <               reduce using rule 51 (expression -> transposition .)
    GREATER_EQUAL   reduce using rule 51 (expression -> transposition .)
    LESS_EQUAL      reduce using rule 51 (expression -> transposition .)
    NOT_EQUAL       reduce using rule 51 (expression -> transposition .)
    EQUAL           reduce using rule 51 (expression -> transposition .)
    :               reduce using rule 51 (expression -> transposition .)
    )               reduce using rule 51 (expression -> transposition .)
    FOR             reduce using rule 51 (expression -> transposition .)
    WHILE           reduce using rule 51 (expression -> transposition .)
    IF              reduce using rule 51 (expression -> transposition .)
    {               reduce using rule 51 (expression -> transposition .)
    PRINT           reduce using rule 51 (expression -> transposition .)
    RETURN          reduce using rule 51 (expression -> transposition .)
    CONTINUE        reduce using rule 51 (expression -> transposition .)
    BREAK           reduce using rule 51 (expression -> transposition .)
    ID              reduce using rule 51 (expression -> transposition .)


state 40

    (52) expression -> uminus .
    DOTDIV          reduce using rule 52 (expression -> uminus .)
    DOTMUL          reduce using rule 52 (expression -> uminus .)
    DOTSUB          reduce using rule 52 (expression -> uminus .)
    DOTADD          reduce using rule 52 (expression -> uminus .)
    /               reduce using rule 52 (expression -> uminus .)
    *               reduce using rule 52 (expression -> uminus .)
    -               reduce using rule 52 (expression -> uminus .)
    +               reduce using rule 52 (expression -> uminus .)
    '               reduce using rule 52 (expression -> uminus .)
    ,               reduce using rule 52 (expression -> uminus .)
    ;               reduce using rule 52 (expression -> uminus .)
    >               reduce using rule 52 (expression -> uminus .)
    <               reduce using rule 52 (expression -> uminus .)
    GREATER_EQUAL   reduce using rule 52 (expression -> uminus .)
    LESS_EQUAL      reduce using rule 52 (expression -> uminus .)
    NOT_EQUAL       reduce using rule 52 (expression -> uminus .)
    EQUAL           reduce using rule 52 (expression -> uminus .)
    :               reduce using rule 52 (expression -> uminus .)
    )               reduce using rule 52 (expression -> uminus .)
    FOR             reduce using rule 52 (expression -> uminus .)
    WHILE           reduce using rule 52 (expression -> uminus .)
    IF              reduce using rule 52 (expression -> uminus .)
    {               reduce using rule 52 (expression -> uminus .)
    PRINT           reduce using rule 52 (expression -> uminus .)
    RETURN          reduce using rule 52 (expression -> uminus .)
    CONTINUE        reduce using rule 52 (expression -> uminus .)
    BREAK           reduce using rule 52 (expression -> uminus .)
    ID              reduce using rule 52 (expression -> uminus .)


state 41

    (53) expression -> matrix_function .
    DOTDIV          reduce using rule 53 (expression -> matrix_function .)
    DOTMUL          reduce using rule 53 (expression -> matrix_function .)
    DOTSUB          reduce using rule 53 (expression -> matrix_function .)
    DOTADD          reduce using rule 53 (expression -> matrix_function .)
    /               reduce using rule 53 (expression -> matrix_function .)
    *               reduce using rule 53 (expression -> matrix_function .)
    -               reduce using rule 53 (expression -> matrix_function .)
    +               reduce using rule 53 (expression -> matrix_function .)
    '               reduce using rule 53 (expression -> matrix_function .)
    ,               reduce using rule 53 (expression -> matrix_function .)
    ;               reduce using rule 53 (expression -> matrix_function .)
    >               reduce using rule 53 (expression -> matrix_function .)
    <               reduce using rule 53 (expression -> matrix_function .)
    GREATER_EQUAL   reduce using rule 53 (expression -> matrix_function .)
    LESS_EQUAL      reduce using rule 53 (expression -> matrix_function .)
    NOT_EQUAL       reduce using rule 53 (expression -> matrix_function .)
    EQUAL           reduce using rule 53 (expression -> matrix_function .)
    :               reduce using rule 53 (expression -> matrix_function .)
    )               reduce using rule 53 (expression -> matrix_function .)
    FOR             reduce using rule 53 (expression -> matrix_function .)
    WHILE           reduce using rule 53 (expression -> matrix_function .)
    IF              reduce using rule 53 (expression -> matrix_function .)
    {               reduce using rule 53 (expression -> matrix_function .)
    PRINT           reduce using rule 53 (expression -> matrix_function .)
    RETURN          reduce using rule 53 (expression -> matrix_function .)
    CONTINUE        reduce using rule 53 (expression -> matrix_function .)
    BREAK           reduce using rule 53 (expression -> matrix_function .)
    ID              reduce using rule 53 (expression -> matrix_function .)


state 42

    (54) expression -> matrix .
    DOTDIV          reduce using rule 54 (expression -> matrix .)
    DOTMUL          reduce using rule 54 (expression -> matrix .)
    DOTSUB          reduce using rule 54 (expression -> matrix .)
    DOTADD          reduce using rule 54 (expression -> matrix .)
    /               reduce using rule 54 (expression -> matrix .)
    *               reduce using rule 54 (expression -> matrix .)
    -               reduce using rule 54 (expression -> matrix .)
    +               reduce using rule 54 (expression -> matrix .)
    '               reduce using rule 54 (expression -> matrix .)
    ,               reduce using rule 54 (expression -> matrix .)
    ;               reduce using rule 54 (expression -> matrix .)
    >               reduce using rule 54 (expression -> matrix .)
    <               reduce using rule 54 (expression -> matrix .)
    GREATER_EQUAL   reduce using rule 54 (expression -> matrix .)
    LESS_EQUAL      reduce using rule 54 (expression -> matrix .)
    NOT_EQUAL       reduce using rule 54 (expression -> matrix .)
    EQUAL           reduce using rule 54 (expression -> matrix .)
    :               reduce using rule 54 (expression -> matrix .)
    )               reduce using rule 54 (expression -> matrix .)
    FOR             reduce using rule 54 (expression -> matrix .)
    WHILE           reduce using rule 54 (expression -> matrix .)
    IF              reduce using rule 54 (expression -> matrix .)
    {               reduce using rule 54 (expression -> matrix .)
    PRINT           reduce using rule 54 (expression -> matrix .)
    RETURN          reduce using rule 54 (expression -> matrix .)
    CONTINUE        reduce using rule 54 (expression -> matrix .)
    BREAK           reduce using rule 54 (expression -> matrix .)
    ID              reduce using rule 54 (expression -> matrix .)


state 43

    (55) expression -> num_expression .
    DOTDIV          reduce using rule 55 (expression -> num_expression .)
    DOTMUL          reduce using rule 55 (expression -> num_expression .)
    DOTSUB          reduce using rule 55 (expression -> num_expression .)
    DOTADD          reduce using rule 55 (expression -> num_expression .)
    /               reduce using rule 55 (expression -> num_expression .)
    *               reduce using rule 55 (expression -> num_expression .)
    -               reduce using rule 55 (expression -> num_expression .)
    +               reduce using rule 55 (expression -> num_expression .)
    '               reduce using rule 55 (expression -> num_expression .)
    ,               reduce using rule 55 (expression -> num_expression .)
    ;               reduce using rule 55 (expression -> num_expression .)
    >               reduce using rule 55 (expression -> num_expression .)
    <               reduce using rule 55 (expression -> num_expression .)
    GREATER_EQUAL   reduce using rule 55 (expression -> num_expression .)
    LESS_EQUAL      reduce using rule 55 (expression -> num_expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> num_expression .)
    EQUAL           reduce using rule 55 (expression -> num_expression .)
    :               reduce using rule 55 (expression -> num_expression .)
    )               reduce using rule 55 (expression -> num_expression .)
    FOR             reduce using rule 55 (expression -> num_expression .)
    WHILE           reduce using rule 55 (expression -> num_expression .)
    IF              reduce using rule 55 (expression -> num_expression .)
    {               reduce using rule 55 (expression -> num_expression .)
    PRINT           reduce using rule 55 (expression -> num_expression .)
    RETURN          reduce using rule 55 (expression -> num_expression .)
    CONTINUE        reduce using rule 55 (expression -> num_expression .)
    BREAK           reduce using rule 55 (expression -> num_expression .)
    ID              reduce using rule 55 (expression -> num_expression .)


state 44

    (66) uminus -> - . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 75
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 45

    (48) string -> STRING .
    ,               reduce using rule 48 (string -> STRING .)
    ;               reduce using rule 48 (string -> STRING .)


state 46

    (32) matrix -> [ . vectors ]
    (33) vectors -> . vector
    (34) vectors -> . vectors , vector
    (35) vector -> . [ variables ]
    [               shift and go to state 76

    vectors                        shift and go to state 77
    vector                         shift and go to state 78

state 47

    (47) number -> INTNUM .
    DOTDIV          reduce using rule 47 (number -> INTNUM .)
    DOTMUL          reduce using rule 47 (number -> INTNUM .)
    DOTSUB          reduce using rule 47 (number -> INTNUM .)
    DOTADD          reduce using rule 47 (number -> INTNUM .)
    /               reduce using rule 47 (number -> INTNUM .)
    *               reduce using rule 47 (number -> INTNUM .)
    -               reduce using rule 47 (number -> INTNUM .)
    +               reduce using rule 47 (number -> INTNUM .)
    '               reduce using rule 47 (number -> INTNUM .)
    ,               reduce using rule 47 (number -> INTNUM .)
    ;               reduce using rule 47 (number -> INTNUM .)
    >               reduce using rule 47 (number -> INTNUM .)
    <               reduce using rule 47 (number -> INTNUM .)
    GREATER_EQUAL   reduce using rule 47 (number -> INTNUM .)
    LESS_EQUAL      reduce using rule 47 (number -> INTNUM .)
    NOT_EQUAL       reduce using rule 47 (number -> INTNUM .)
    EQUAL           reduce using rule 47 (number -> INTNUM .)
    :               reduce using rule 47 (number -> INTNUM .)
    )               reduce using rule 47 (number -> INTNUM .)
    FOR             reduce using rule 47 (number -> INTNUM .)
    WHILE           reduce using rule 47 (number -> INTNUM .)
    IF              reduce using rule 47 (number -> INTNUM .)
    {               reduce using rule 47 (number -> INTNUM .)
    PRINT           reduce using rule 47 (number -> INTNUM .)
    RETURN          reduce using rule 47 (number -> INTNUM .)
    CONTINUE        reduce using rule 47 (number -> INTNUM .)
    BREAK           reduce using rule 47 (number -> INTNUM .)
    ID              reduce using rule 47 (number -> INTNUM .)
    ]               reduce using rule 47 (number -> INTNUM .)


state 48

    (28) matrix_function -> matrix_function_name . ( INTNUM )
    (               shift and go to state 79


state 49

    (64) num_expression -> var .
    DOTDIV          reduce using rule 64 (num_expression -> var .)
    DOTMUL          reduce using rule 64 (num_expression -> var .)
    DOTSUB          reduce using rule 64 (num_expression -> var .)
    DOTADD          reduce using rule 64 (num_expression -> var .)
    /               reduce using rule 64 (num_expression -> var .)
    *               reduce using rule 64 (num_expression -> var .)
    -               reduce using rule 64 (num_expression -> var .)
    +               reduce using rule 64 (num_expression -> var .)
    '               reduce using rule 64 (num_expression -> var .)
    ,               reduce using rule 64 (num_expression -> var .)
    ;               reduce using rule 64 (num_expression -> var .)
    >               reduce using rule 64 (num_expression -> var .)
    <               reduce using rule 64 (num_expression -> var .)
    GREATER_EQUAL   reduce using rule 64 (num_expression -> var .)
    LESS_EQUAL      reduce using rule 64 (num_expression -> var .)
    NOT_EQUAL       reduce using rule 64 (num_expression -> var .)
    EQUAL           reduce using rule 64 (num_expression -> var .)
    :               reduce using rule 64 (num_expression -> var .)
    )               reduce using rule 64 (num_expression -> var .)
    FOR             reduce using rule 64 (num_expression -> var .)
    WHILE           reduce using rule 64 (num_expression -> var .)
    IF              reduce using rule 64 (num_expression -> var .)
    {               reduce using rule 64 (num_expression -> var .)
    PRINT           reduce using rule 64 (num_expression -> var .)
    RETURN          reduce using rule 64 (num_expression -> var .)
    CONTINUE        reduce using rule 64 (num_expression -> var .)
    BREAK           reduce using rule 64 (num_expression -> var .)
    ID              reduce using rule 64 (num_expression -> var .)


state 50

    (65) num_expression -> number .
    DOTDIV          reduce using rule 65 (num_expression -> number .)
    DOTMUL          reduce using rule 65 (num_expression -> number .)
    DOTSUB          reduce using rule 65 (num_expression -> number .)
    DOTADD          reduce using rule 65 (num_expression -> number .)
    /               reduce using rule 65 (num_expression -> number .)
    *               reduce using rule 65 (num_expression -> number .)
    -               reduce using rule 65 (num_expression -> number .)
    +               reduce using rule 65 (num_expression -> number .)
    '               reduce using rule 65 (num_expression -> number .)
    ,               reduce using rule 65 (num_expression -> number .)
    ;               reduce using rule 65 (num_expression -> number .)
    >               reduce using rule 65 (num_expression -> number .)
    <               reduce using rule 65 (num_expression -> number .)
    GREATER_EQUAL   reduce using rule 65 (num_expression -> number .)
    LESS_EQUAL      reduce using rule 65 (num_expression -> number .)
    NOT_EQUAL       reduce using rule 65 (num_expression -> number .)
    EQUAL           reduce using rule 65 (num_expression -> number .)
    :               reduce using rule 65 (num_expression -> number .)
    )               reduce using rule 65 (num_expression -> number .)
    FOR             reduce using rule 65 (num_expression -> number .)
    WHILE           reduce using rule 65 (num_expression -> number .)
    IF              reduce using rule 65 (num_expression -> number .)
    {               reduce using rule 65 (num_expression -> number .)
    PRINT           reduce using rule 65 (num_expression -> number .)
    RETURN          reduce using rule 65 (num_expression -> number .)
    CONTINUE        reduce using rule 65 (num_expression -> number .)
    BREAK           reduce using rule 65 (num_expression -> number .)
    ID              reduce using rule 65 (num_expression -> number .)


state 51

    (29) matrix_function_name -> ZEROS .
    (               reduce using rule 29 (matrix_function_name -> ZEROS .)


state 52

    (30) matrix_function_name -> ONES .
    (               reduce using rule 30 (matrix_function_name -> ONES .)


state 53

    (31) matrix_function_name -> EYE .
    (               reduce using rule 31 (matrix_function_name -> EYE .)


state 54

    (46) number -> FLOAT .
    DOTDIV          reduce using rule 46 (number -> FLOAT .)
    DOTMUL          reduce using rule 46 (number -> FLOAT .)
    DOTSUB          reduce using rule 46 (number -> FLOAT .)
    DOTADD          reduce using rule 46 (number -> FLOAT .)
    /               reduce using rule 46 (number -> FLOAT .)
    *               reduce using rule 46 (number -> FLOAT .)
    -               reduce using rule 46 (number -> FLOAT .)
    +               reduce using rule 46 (number -> FLOAT .)
    '               reduce using rule 46 (number -> FLOAT .)
    ,               reduce using rule 46 (number -> FLOAT .)
    ;               reduce using rule 46 (number -> FLOAT .)
    >               reduce using rule 46 (number -> FLOAT .)
    <               reduce using rule 46 (number -> FLOAT .)
    GREATER_EQUAL   reduce using rule 46 (number -> FLOAT .)
    LESS_EQUAL      reduce using rule 46 (number -> FLOAT .)
    NOT_EQUAL       reduce using rule 46 (number -> FLOAT .)
    EQUAL           reduce using rule 46 (number -> FLOAT .)
    :               reduce using rule 46 (number -> FLOAT .)
    )               reduce using rule 46 (number -> FLOAT .)
    FOR             reduce using rule 46 (number -> FLOAT .)
    WHILE           reduce using rule 46 (number -> FLOAT .)
    IF              reduce using rule 46 (number -> FLOAT .)
    {               reduce using rule 46 (number -> FLOAT .)
    PRINT           reduce using rule 46 (number -> FLOAT .)
    RETURN          reduce using rule 46 (number -> FLOAT .)
    CONTINUE        reduce using rule 46 (number -> FLOAT .)
    BREAK           reduce using rule 46 (number -> FLOAT .)
    ID              reduce using rule 46 (number -> FLOAT .)
    ]               reduce using rule 46 (number -> FLOAT .)


state 55

    (69) statement -> RETURN expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    ;               reduce using rule 69 (statement -> RETURN expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 56

    (25) assignment -> vector_element assignment_op . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    vector_element                 shift and go to state 37
    expression                     shift and go to state 80
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 57

    (26) assignment -> matrix_element assignment_op . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    matrix_element                 shift and go to state 38
    expression                     shift and go to state 81
    vector_element                 shift and go to state 37
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 58

    (43) vector_element -> ID [ . INTNUM ]
    (44) matrix_element -> ID [ . INTNUM , INTNUM ]
    INTNUM          shift and go to state 82


state 59

    (6) instruction -> FOR var = . range instruction
    (13) range -> . expression : expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    var                            shift and go to state 49
    range                          shift and go to state 83
    expression                     shift and go to state 84
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    number                         shift and go to state 50

state 60

    (27) assignment -> var assignment_op expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    ;               reduce using rule 27 (assignment -> var assignment_op expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 61

    (7) instruction -> WHILE ( condition . ) instruction
    )               shift and go to state 85


state 62

    (14) condition -> expression . > expression
    (15) condition -> expression . < expression
    (16) condition -> expression . GREATER_EQUAL expression
    (17) condition -> expression . LESS_EQUAL expression
    (18) condition -> expression . NOT_EQUAL expression
    (19) condition -> expression . EQUAL expression
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    >               shift and go to state 86
    <               shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    NOT_EQUAL       shift and go to state 90
    EQUAL           shift and go to state 91
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 63

    (8) instruction -> IF ( condition . ) instruction ELSE instruction
    (9) instruction -> IF ( condition . ) instruction
    )               shift and go to state 92


state 64

    (10) instruction -> { instructions } .
    FOR             reduce using rule 10 (instruction -> { instructions } .)
    WHILE           reduce using rule 10 (instruction -> { instructions } .)
    IF              reduce using rule 10 (instruction -> { instructions } .)
    {               reduce using rule 10 (instruction -> { instructions } .)
    PRINT           reduce using rule 10 (instruction -> { instructions } .)
    RETURN          reduce using rule 10 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 10 (instruction -> { instructions } .)
    BREAK           reduce using rule 10 (instruction -> { instructions } .)
    ID              reduce using rule 10 (instruction -> { instructions } .)
    $end            reduce using rule 10 (instruction -> { instructions } .)
    }               reduce using rule 10 (instruction -> { instructions } .)
    ELSE            reduce using rule 10 (instruction -> { instructions } .)


state 65

    (73) print_vals -> print_vals , . print_val
    (74) print_val -> . expression
    (75) print_val -> . string
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (48) string -> . STRING
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    STRING          shift and go to state 45
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    print_val                      shift and go to state 93
    expression                     shift and go to state 35
    string                         shift and go to state 36
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 66

    (56) expression -> expression DOTDIV . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 94
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 67

    (57) expression -> expression DOTMUL . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 95
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 68

    (58) expression -> expression DOTSUB . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 96
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 69

    (59) expression -> expression DOTADD . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 97
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 70

    (60) expression -> expression / . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 98
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 71

    (61) expression -> expression * . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 99
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 72

    (62) expression -> expression - . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 100
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 73

    (63) expression -> expression + . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 101
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 74

    (67) transposition -> expression ' .
    DOTDIV          reduce using rule 67 (transposition -> expression ' .)
    DOTMUL          reduce using rule 67 (transposition -> expression ' .)
    DOTSUB          reduce using rule 67 (transposition -> expression ' .)
    DOTADD          reduce using rule 67 (transposition -> expression ' .)
    /               reduce using rule 67 (transposition -> expression ' .)
    *               reduce using rule 67 (transposition -> expression ' .)
    -               reduce using rule 67 (transposition -> expression ' .)
    +               reduce using rule 67 (transposition -> expression ' .)
    '               reduce using rule 67 (transposition -> expression ' .)
    ,               reduce using rule 67 (transposition -> expression ' .)
    ;               reduce using rule 67 (transposition -> expression ' .)
    >               reduce using rule 67 (transposition -> expression ' .)
    <               reduce using rule 67 (transposition -> expression ' .)
    GREATER_EQUAL   reduce using rule 67 (transposition -> expression ' .)
    LESS_EQUAL      reduce using rule 67 (transposition -> expression ' .)
    NOT_EQUAL       reduce using rule 67 (transposition -> expression ' .)
    EQUAL           reduce using rule 67 (transposition -> expression ' .)
    :               reduce using rule 67 (transposition -> expression ' .)
    )               reduce using rule 67 (transposition -> expression ' .)
    FOR             reduce using rule 67 (transposition -> expression ' .)
    WHILE           reduce using rule 67 (transposition -> expression ' .)
    IF              reduce using rule 67 (transposition -> expression ' .)
    {               reduce using rule 67 (transposition -> expression ' .)
    PRINT           reduce using rule 67 (transposition -> expression ' .)
    RETURN          reduce using rule 67 (transposition -> expression ' .)
    CONTINUE        reduce using rule 67 (transposition -> expression ' .)
    BREAK           reduce using rule 67 (transposition -> expression ' .)
    ID              reduce using rule 67 (transposition -> expression ' .)


state 75

    (66) uminus -> - expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTDIV          reduce using rule 66 (uminus -> - expression .)
    DOTMUL          reduce using rule 66 (uminus -> - expression .)
    DOTSUB          reduce using rule 66 (uminus -> - expression .)
    DOTADD          reduce using rule 66 (uminus -> - expression .)
    /               reduce using rule 66 (uminus -> - expression .)
    *               reduce using rule 66 (uminus -> - expression .)
    -               reduce using rule 66 (uminus -> - expression .)
    +               reduce using rule 66 (uminus -> - expression .)
    ,               reduce using rule 66 (uminus -> - expression .)
    ;               reduce using rule 66 (uminus -> - expression .)
    >               reduce using rule 66 (uminus -> - expression .)
    <               reduce using rule 66 (uminus -> - expression .)
    GREATER_EQUAL   reduce using rule 66 (uminus -> - expression .)
    LESS_EQUAL      reduce using rule 66 (uminus -> - expression .)
    NOT_EQUAL       reduce using rule 66 (uminus -> - expression .)
    EQUAL           reduce using rule 66 (uminus -> - expression .)
    :               reduce using rule 66 (uminus -> - expression .)
    )               reduce using rule 66 (uminus -> - expression .)
    FOR             reduce using rule 66 (uminus -> - expression .)
    WHILE           reduce using rule 66 (uminus -> - expression .)
    IF              reduce using rule 66 (uminus -> - expression .)
    {               reduce using rule 66 (uminus -> - expression .)
    PRINT           reduce using rule 66 (uminus -> - expression .)
    RETURN          reduce using rule 66 (uminus -> - expression .)
    CONTINUE        reduce using rule 66 (uminus -> - expression .)
    BREAK           reduce using rule 66 (uminus -> - expression .)
    ID              reduce using rule 66 (uminus -> - expression .)
    '               shift and go to state 74


state 76

    (35) vector -> [ . variables ]
    (36) variables -> . variable
    (37) variables -> . variables , variable
    (38) variable -> . element
    (39) variable -> . var
    (40) variable -> . number
    (41) element -> . matrix_element
    (42) element -> . vector_element
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (43) vector_element -> . ID [ INTNUM ]
    ID              shift and go to state 109
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    variables                      shift and go to state 102
    variable                       shift and go to state 103
    element                        shift and go to state 104
    var                            shift and go to state 105
    number                         shift and go to state 106
    matrix_element                 shift and go to state 107
    vector_element                 shift and go to state 108

state 77

    (32) matrix -> [ vectors . ]
    (34) vectors -> vectors . , vector
    ]               shift and go to state 110
    ,               shift and go to state 111


state 78

    (33) vectors -> vector .
    ]               reduce using rule 33 (vectors -> vector .)
    ,               reduce using rule 33 (vectors -> vector .)


state 79

    (28) matrix_function -> matrix_function_name ( . INTNUM )
    INTNUM          shift and go to state 112


state 80

    (25) assignment -> vector_element assignment_op expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    ;               reduce using rule 25 (assignment -> vector_element assignment_op expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 81

    (26) assignment -> matrix_element assignment_op expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    ;               reduce using rule 26 (assignment -> matrix_element assignment_op expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 82

    (43) vector_element -> ID [ INTNUM . ]
    (44) matrix_element -> ID [ INTNUM . , INTNUM ]
    ]               shift and go to state 113
    ,               shift and go to state 114


state 83

    (6) instruction -> FOR var = range . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    var                            shift and go to state 6
    instruction                    shift and go to state 115
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 84

    (13) range -> expression . : expression
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    :               shift and go to state 116
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 85

    (7) instruction -> WHILE ( condition ) . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 117
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 86

    (14) condition -> expression > . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 118
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 87

    (15) condition -> expression < . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 119
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 88

    (16) condition -> expression GREATER_EQUAL . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 120
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 89

    (17) condition -> expression LESS_EQUAL . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 121
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 90

    (18) condition -> expression NOT_EQUAL . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 122
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 91

    (19) condition -> expression EQUAL . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 123
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 92

    (8) instruction -> IF ( condition ) . instruction ELSE instruction
    (9) instruction -> IF ( condition ) . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 124
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 93

    (73) print_vals -> print_vals , print_val .
    ,               reduce using rule 73 (print_vals -> print_vals , print_val .)
    ;               reduce using rule 73 (print_vals -> print_vals , print_val .)


state 94

    (56) expression -> expression DOTDIV expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTDIV          reduce using rule 56 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 56 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 56 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 56 (expression -> expression DOTDIV expression .)
    /               reduce using rule 56 (expression -> expression DOTDIV expression .)
    *               reduce using rule 56 (expression -> expression DOTDIV expression .)
    -               reduce using rule 56 (expression -> expression DOTDIV expression .)
    +               reduce using rule 56 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 56 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 56 (expression -> expression DOTDIV expression .)
    >               reduce using rule 56 (expression -> expression DOTDIV expression .)
    <               reduce using rule 56 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 56 (expression -> expression DOTDIV expression .)
    LESS_EQUAL      reduce using rule 56 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 56 (expression -> expression DOTDIV expression .)
    :               reduce using rule 56 (expression -> expression DOTDIV expression .)
    )               reduce using rule 56 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 56 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 56 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 56 (expression -> expression DOTDIV expression .)
    {               reduce using rule 56 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 56 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 56 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 56 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 56 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 56 (expression -> expression DOTDIV expression .)
    '               shift and go to state 74


state 95

    (57) expression -> expression DOTMUL expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTDIV          reduce using rule 57 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 57 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 57 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 57 (expression -> expression DOTMUL expression .)
    /               reduce using rule 57 (expression -> expression DOTMUL expression .)
    *               reduce using rule 57 (expression -> expression DOTMUL expression .)
    -               reduce using rule 57 (expression -> expression DOTMUL expression .)
    +               reduce using rule 57 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 57 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 57 (expression -> expression DOTMUL expression .)
    >               reduce using rule 57 (expression -> expression DOTMUL expression .)
    <               reduce using rule 57 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 57 (expression -> expression DOTMUL expression .)
    LESS_EQUAL      reduce using rule 57 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 57 (expression -> expression DOTMUL expression .)
    :               reduce using rule 57 (expression -> expression DOTMUL expression .)
    )               reduce using rule 57 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 57 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 57 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 57 (expression -> expression DOTMUL expression .)
    {               reduce using rule 57 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 57 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 57 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 57 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 57 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 57 (expression -> expression DOTMUL expression .)
    '               shift and go to state 74


state 96

    (58) expression -> expression DOTSUB expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTSUB          reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 58 (expression -> expression DOTSUB expression .)
    -               reduce using rule 58 (expression -> expression DOTSUB expression .)
    +               reduce using rule 58 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 58 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 58 (expression -> expression DOTSUB expression .)
    >               reduce using rule 58 (expression -> expression DOTSUB expression .)
    <               reduce using rule 58 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 58 (expression -> expression DOTSUB expression .)
    LESS_EQUAL      reduce using rule 58 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 58 (expression -> expression DOTSUB expression .)
    :               reduce using rule 58 (expression -> expression DOTSUB expression .)
    )               reduce using rule 58 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 58 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 58 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 58 (expression -> expression DOTSUB expression .)
    {               reduce using rule 58 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 58 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 58 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 58 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 58 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    /               shift and go to state 70
    *               shift and go to state 71
    '               shift and go to state 74


state 97

    (59) expression -> expression DOTADD expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTSUB          reduce using rule 59 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 59 (expression -> expression DOTADD expression .)
    -               reduce using rule 59 (expression -> expression DOTADD expression .)
    +               reduce using rule 59 (expression -> expression DOTADD expression .)
    ,               reduce using rule 59 (expression -> expression DOTADD expression .)
    ;               reduce using rule 59 (expression -> expression DOTADD expression .)
    >               reduce using rule 59 (expression -> expression DOTADD expression .)
    <               reduce using rule 59 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression DOTADD expression .)
    LESS_EQUAL      reduce using rule 59 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 59 (expression -> expression DOTADD expression .)
    :               reduce using rule 59 (expression -> expression DOTADD expression .)
    )               reduce using rule 59 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 59 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 59 (expression -> expression DOTADD expression .)
    IF              reduce using rule 59 (expression -> expression DOTADD expression .)
    {               reduce using rule 59 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 59 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 59 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 59 (expression -> expression DOTADD expression .)
    ID              reduce using rule 59 (expression -> expression DOTADD expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    /               shift and go to state 70
    *               shift and go to state 71
    '               shift and go to state 74


state 98

    (60) expression -> expression / expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTSUB          reduce using rule 60 (expression -> expression / expression .)
    DOTADD          reduce using rule 60 (expression -> expression / expression .)
    /               reduce using rule 60 (expression -> expression / expression .)
    *               reduce using rule 60 (expression -> expression / expression .)
    -               reduce using rule 60 (expression -> expression / expression .)
    +               reduce using rule 60 (expression -> expression / expression .)
    ,               reduce using rule 60 (expression -> expression / expression .)
    ;               reduce using rule 60 (expression -> expression / expression .)
    >               reduce using rule 60 (expression -> expression / expression .)
    <               reduce using rule 60 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 60 (expression -> expression / expression .)
    LESS_EQUAL      reduce using rule 60 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 60 (expression -> expression / expression .)
    EQUAL           reduce using rule 60 (expression -> expression / expression .)
    :               reduce using rule 60 (expression -> expression / expression .)
    )               reduce using rule 60 (expression -> expression / expression .)
    FOR             reduce using rule 60 (expression -> expression / expression .)
    WHILE           reduce using rule 60 (expression -> expression / expression .)
    IF              reduce using rule 60 (expression -> expression / expression .)
    {               reduce using rule 60 (expression -> expression / expression .)
    PRINT           reduce using rule 60 (expression -> expression / expression .)
    RETURN          reduce using rule 60 (expression -> expression / expression .)
    CONTINUE        reduce using rule 60 (expression -> expression / expression .)
    BREAK           reduce using rule 60 (expression -> expression / expression .)
    ID              reduce using rule 60 (expression -> expression / expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    '               shift and go to state 74


state 99

    (61) expression -> expression * expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    DOTSUB          reduce using rule 61 (expression -> expression * expression .)
    DOTADD          reduce using rule 61 (expression -> expression * expression .)
    /               reduce using rule 61 (expression -> expression * expression .)
    *               reduce using rule 61 (expression -> expression * expression .)
    -               reduce using rule 61 (expression -> expression * expression .)
    +               reduce using rule 61 (expression -> expression * expression .)
    ,               reduce using rule 61 (expression -> expression * expression .)
    ;               reduce using rule 61 (expression -> expression * expression .)
    >               reduce using rule 61 (expression -> expression * expression .)
    <               reduce using rule 61 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 61 (expression -> expression * expression .)
    LESS_EQUAL      reduce using rule 61 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 61 (expression -> expression * expression .)
    EQUAL           reduce using rule 61 (expression -> expression * expression .)
    :               reduce using rule 61 (expression -> expression * expression .)
    )               reduce using rule 61 (expression -> expression * expression .)
    FOR             reduce using rule 61 (expression -> expression * expression .)
    WHILE           reduce using rule 61 (expression -> expression * expression .)
    IF              reduce using rule 61 (expression -> expression * expression .)
    {               reduce using rule 61 (expression -> expression * expression .)
    PRINT           reduce using rule 61 (expression -> expression * expression .)
    RETURN          reduce using rule 61 (expression -> expression * expression .)
    CONTINUE        reduce using rule 61 (expression -> expression * expression .)
    BREAK           reduce using rule 61 (expression -> expression * expression .)
    ID              reduce using rule 61 (expression -> expression * expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    '               shift and go to state 74


state 100

    (62) expression -> expression - expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    -               reduce using rule 62 (expression -> expression - expression .)
    +               reduce using rule 62 (expression -> expression - expression .)
    ,               reduce using rule 62 (expression -> expression - expression .)
    ;               reduce using rule 62 (expression -> expression - expression .)
    >               reduce using rule 62 (expression -> expression - expression .)
    <               reduce using rule 62 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 62 (expression -> expression - expression .)
    LESS_EQUAL      reduce using rule 62 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression - expression .)
    EQUAL           reduce using rule 62 (expression -> expression - expression .)
    :               reduce using rule 62 (expression -> expression - expression .)
    )               reduce using rule 62 (expression -> expression - expression .)
    FOR             reduce using rule 62 (expression -> expression - expression .)
    WHILE           reduce using rule 62 (expression -> expression - expression .)
    IF              reduce using rule 62 (expression -> expression - expression .)
    {               reduce using rule 62 (expression -> expression - expression .)
    PRINT           reduce using rule 62 (expression -> expression - expression .)
    RETURN          reduce using rule 62 (expression -> expression - expression .)
    CONTINUE        reduce using rule 62 (expression -> expression - expression .)
    BREAK           reduce using rule 62 (expression -> expression - expression .)
    ID              reduce using rule 62 (expression -> expression - expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    '               shift and go to state 74


state 101

    (63) expression -> expression + expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    -               reduce using rule 63 (expression -> expression + expression .)
    +               reduce using rule 63 (expression -> expression + expression .)
    ,               reduce using rule 63 (expression -> expression + expression .)
    ;               reduce using rule 63 (expression -> expression + expression .)
    >               reduce using rule 63 (expression -> expression + expression .)
    <               reduce using rule 63 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 63 (expression -> expression + expression .)
    LESS_EQUAL      reduce using rule 63 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression + expression .)
    EQUAL           reduce using rule 63 (expression -> expression + expression .)
    :               reduce using rule 63 (expression -> expression + expression .)
    )               reduce using rule 63 (expression -> expression + expression .)
    FOR             reduce using rule 63 (expression -> expression + expression .)
    WHILE           reduce using rule 63 (expression -> expression + expression .)
    IF              reduce using rule 63 (expression -> expression + expression .)
    {               reduce using rule 63 (expression -> expression + expression .)
    PRINT           reduce using rule 63 (expression -> expression + expression .)
    RETURN          reduce using rule 63 (expression -> expression + expression .)
    CONTINUE        reduce using rule 63 (expression -> expression + expression .)
    BREAK           reduce using rule 63 (expression -> expression + expression .)
    ID              reduce using rule 63 (expression -> expression + expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    '               shift and go to state 74


state 102

    (35) vector -> [ variables . ]
    (37) variables -> variables . , variable
    ]               shift and go to state 125
    ,               shift and go to state 126


state 103

    (36) variables -> variable .
    ]               reduce using rule 36 (variables -> variable .)
    ,               reduce using rule 36 (variables -> variable .)


state 104

    (38) variable -> element .
    ]               reduce using rule 38 (variable -> element .)
    ,               reduce using rule 38 (variable -> element .)


state 105

    (39) variable -> var .
    ]               reduce using rule 39 (variable -> var .)
    ,               reduce using rule 39 (variable -> var .)


state 106

    (40) variable -> number .
    ]               reduce using rule 40 (variable -> number .)
    ,               reduce using rule 40 (variable -> number .)


state 107

    (41) element -> matrix_element .
    ]               reduce using rule 41 (element -> matrix_element .)
    ,               reduce using rule 41 (element -> matrix_element .)


state 108

    (42) element -> vector_element .
    ]               reduce using rule 42 (element -> vector_element .)
    ,               reduce using rule 42 (element -> vector_element .)


state 109

    (45) var -> ID .
    (44) matrix_element -> ID . [ INTNUM , INTNUM ]
    (43) vector_element -> ID . [ INTNUM ]
    ]               reduce using rule 45 (var -> ID .)
    ,               reduce using rule 45 (var -> ID .)
    [               shift and go to state 127


state 110

    (32) matrix -> [ vectors ] .
    DOTDIV          reduce using rule 32 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 32 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 32 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 32 (matrix -> [ vectors ] .)
    /               reduce using rule 32 (matrix -> [ vectors ] .)
    *               reduce using rule 32 (matrix -> [ vectors ] .)
    -               reduce using rule 32 (matrix -> [ vectors ] .)
    +               reduce using rule 32 (matrix -> [ vectors ] .)
    '               reduce using rule 32 (matrix -> [ vectors ] .)
    ,               reduce using rule 32 (matrix -> [ vectors ] .)
    ;               reduce using rule 32 (matrix -> [ vectors ] .)
    >               reduce using rule 32 (matrix -> [ vectors ] .)
    <               reduce using rule 32 (matrix -> [ vectors ] .)
    GREATER_EQUAL   reduce using rule 32 (matrix -> [ vectors ] .)
    LESS_EQUAL      reduce using rule 32 (matrix -> [ vectors ] .)
    NOT_EQUAL       reduce using rule 32 (matrix -> [ vectors ] .)
    EQUAL           reduce using rule 32 (matrix -> [ vectors ] .)
    :               reduce using rule 32 (matrix -> [ vectors ] .)
    )               reduce using rule 32 (matrix -> [ vectors ] .)
    FOR             reduce using rule 32 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 32 (matrix -> [ vectors ] .)
    IF              reduce using rule 32 (matrix -> [ vectors ] .)
    {               reduce using rule 32 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 32 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 32 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 32 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 32 (matrix -> [ vectors ] .)
    ID              reduce using rule 32 (matrix -> [ vectors ] .)


state 111

    (34) vectors -> vectors , . vector
    (35) vector -> . [ variables ]
    [               shift and go to state 76

    vector                         shift and go to state 128

state 112

    (28) matrix_function -> matrix_function_name ( INTNUM . )
    )               shift and go to state 129


state 113

    (43) vector_element -> ID [ INTNUM ] .
    =               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    ADDASSIGN       reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    SUBASSIGN       reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    DIVASSIGN       reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    MULASSIGN       reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    DOTDIV          reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    DOTMUL          reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    DOTSUB          reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    DOTADD          reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    /               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    *               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    -               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    +               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    '               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    ,               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    ;               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    >               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    <               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    GREATER_EQUAL   reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    LESS_EQUAL      reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    NOT_EQUAL       reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    EQUAL           reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    :               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    )               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    FOR             reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    WHILE           reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    IF              reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    {               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    PRINT           reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    RETURN          reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    CONTINUE        reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    BREAK           reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    ID              reduce using rule 43 (vector_element -> ID [ INTNUM ] .)
    ]               reduce using rule 43 (vector_element -> ID [ INTNUM ] .)


state 114

    (44) matrix_element -> ID [ INTNUM , . INTNUM ]
    INTNUM          shift and go to state 130


state 115

    (6) instruction -> FOR var = range instruction .
    FOR             reduce using rule 6 (instruction -> FOR var = range instruction .)
    WHILE           reduce using rule 6 (instruction -> FOR var = range instruction .)
    IF              reduce using rule 6 (instruction -> FOR var = range instruction .)
    {               reduce using rule 6 (instruction -> FOR var = range instruction .)
    PRINT           reduce using rule 6 (instruction -> FOR var = range instruction .)
    RETURN          reduce using rule 6 (instruction -> FOR var = range instruction .)
    CONTINUE        reduce using rule 6 (instruction -> FOR var = range instruction .)
    BREAK           reduce using rule 6 (instruction -> FOR var = range instruction .)
    ID              reduce using rule 6 (instruction -> FOR var = range instruction .)
    $end            reduce using rule 6 (instruction -> FOR var = range instruction .)
    }               reduce using rule 6 (instruction -> FOR var = range instruction .)
    ELSE            reduce using rule 6 (instruction -> FOR var = range instruction .)


state 116

    (13) range -> expression : . expression
    (49) expression -> . vector_element
    (50) expression -> . matrix_element
    (51) expression -> . transposition
    (52) expression -> . uminus
    (53) expression -> . matrix_function
    (54) expression -> . matrix
    (55) expression -> . num_expression
    (56) expression -> . expression DOTDIV expression
    (57) expression -> . expression DOTMUL expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression / expression
    (61) expression -> . expression * expression
    (62) expression -> . expression - expression
    (63) expression -> . expression + expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (67) transposition -> . expression '
    (66) uminus -> . - expression
    (28) matrix_function -> . matrix_function_name ( INTNUM )
    (32) matrix -> . [ vectors ]
    (64) num_expression -> . var
    (65) num_expression -> . number
    (29) matrix_function_name -> . ZEROS
    (30) matrix_function_name -> . ONES
    (31) matrix_function_name -> . EYE
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    ID              shift and go to state 18
    -               shift and go to state 44
    [               shift and go to state 46
    ZEROS           shift and go to state 51
    ONES            shift and go to state 52
    EYE             shift and go to state 53
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    expression                     shift and go to state 131
    vector_element                 shift and go to state 37
    matrix_element                 shift and go to state 38
    transposition                  shift and go to state 39
    uminus                         shift and go to state 40
    matrix_function                shift and go to state 41
    matrix                         shift and go to state 42
    num_expression                 shift and go to state 43
    matrix_function_name           shift and go to state 48
    var                            shift and go to state 49
    number                         shift and go to state 50

state 117

    (7) instruction -> WHILE ( condition ) instruction .
    FOR             reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    IF              reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    {               reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    ID              reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    $end            reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    }               reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 7 (instruction -> WHILE ( condition ) instruction .)


state 118

    (14) condition -> expression > expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 14 (condition -> expression > expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 119

    (15) condition -> expression < expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 15 (condition -> expression < expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 120

    (16) condition -> expression GREATER_EQUAL expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 16 (condition -> expression GREATER_EQUAL expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 121

    (17) condition -> expression LESS_EQUAL expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 17 (condition -> expression LESS_EQUAL expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 122

    (18) condition -> expression NOT_EQUAL expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 18 (condition -> expression NOT_EQUAL expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 123

    (19) condition -> expression EQUAL expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    )               reduce using rule 19 (condition -> expression EQUAL expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 124

    (8) instruction -> IF ( condition ) instruction . ELSE instruction
    (9) instruction -> IF ( condition ) instruction .
    ELSE            shift and go to state 132
    FOR             reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    WHILE           reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    IF              reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    {               reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    PRINT           reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    RETURN          reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    BREAK           reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    ID              reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    $end            reduce using rule 9 (instruction -> IF ( condition ) instruction .)
    }               reduce using rule 9 (instruction -> IF ( condition ) instruction .)


state 125

    (35) vector -> [ variables ] .
    ]               reduce using rule 35 (vector -> [ variables ] .)
    ,               reduce using rule 35 (vector -> [ variables ] .)


state 126

    (37) variables -> variables , . variable
    (38) variable -> . element
    (39) variable -> . var
    (40) variable -> . number
    (41) element -> . matrix_element
    (42) element -> . vector_element
    (45) var -> . ID
    (46) number -> . FLOAT
    (47) number -> . INTNUM
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (43) vector_element -> . ID [ INTNUM ]
    ID              shift and go to state 109
    FLOAT           shift and go to state 54
    INTNUM          shift and go to state 47

    variable                       shift and go to state 133
    element                        shift and go to state 104
    var                            shift and go to state 105
    number                         shift and go to state 106
    matrix_element                 shift and go to state 107
    vector_element                 shift and go to state 108

state 127

    (44) matrix_element -> ID [ . INTNUM , INTNUM ]
    (43) vector_element -> ID [ . INTNUM ]
    INTNUM          shift and go to state 134


state 128

    (34) vectors -> vectors , vector .
    ]               reduce using rule 34 (vectors -> vectors , vector .)
    ,               reduce using rule 34 (vectors -> vectors , vector .)


state 129

    (28) matrix_function -> matrix_function_name ( INTNUM ) .
    DOTDIV          reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    DOTMUL          reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    DOTSUB          reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    DOTADD          reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    /               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    *               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    -               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    +               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    '               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    ,               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    ;               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    >               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    <               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    GREATER_EQUAL   reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    LESS_EQUAL      reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    NOT_EQUAL       reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    EQUAL           reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    :               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    )               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    FOR             reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    WHILE           reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    IF              reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    {               reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    PRINT           reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    RETURN          reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    CONTINUE        reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    BREAK           reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)
    ID              reduce using rule 28 (matrix_function -> matrix_function_name ( INTNUM ) .)


state 130

    (44) matrix_element -> ID [ INTNUM , INTNUM . ]
    ]               shift and go to state 135


state 131

    (13) range -> expression : expression .
    (56) expression -> expression . DOTDIV expression
    (57) expression -> expression . DOTMUL expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . / expression
    (61) expression -> expression . * expression
    (62) expression -> expression . - expression
    (63) expression -> expression . + expression
    (67) transposition -> expression . '
    FOR             reduce using rule 13 (range -> expression : expression .)
    WHILE           reduce using rule 13 (range -> expression : expression .)
    IF              reduce using rule 13 (range -> expression : expression .)
    {               reduce using rule 13 (range -> expression : expression .)
    PRINT           reduce using rule 13 (range -> expression : expression .)
    RETURN          reduce using rule 13 (range -> expression : expression .)
    CONTINUE        reduce using rule 13 (range -> expression : expression .)
    BREAK           reduce using rule 13 (range -> expression : expression .)
    ID              reduce using rule 13 (range -> expression : expression .)
    DOTDIV          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTADD          shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    -               shift and go to state 72
    +               shift and go to state 73
    '               shift and go to state 74


state 132

    (8) instruction -> IF ( condition ) instruction ELSE . instruction
    (6) instruction -> . FOR var = range instruction
    (7) instruction -> . WHILE ( condition ) instruction
    (8) instruction -> . IF ( condition ) instruction ELSE instruction
    (9) instruction -> . IF ( condition ) instruction
    (10) instruction -> . { instructions }
    (11) instruction -> . statement ;
    (12) instruction -> . assignment ;
    (68) statement -> . PRINT print_vals
    (69) statement -> . RETURN expression
    (70) statement -> . CONTINUE
    (71) statement -> . BREAK
    (25) assignment -> . vector_element assignment_op expression
    (26) assignment -> . matrix_element assignment_op expression
    (27) assignment -> . var assignment_op expression
    (43) vector_element -> . ID [ INTNUM ]
    (44) matrix_element -> . ID [ INTNUM , INTNUM ]
    (45) var -> . ID
    FOR             shift and go to state 5
    WHILE           shift and go to state 7
    IF              shift and go to state 8
    {               shift and go to state 9
    PRINT           shift and go to state 12
    RETURN          shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 136
    var                            shift and go to state 6
    statement                      shift and go to state 10
    assignment                     shift and go to state 11
    vector_element                 shift and go to state 16
    matrix_element                 shift and go to state 17

state 133

    (37) variables -> variables , variable .
    ]               reduce using rule 37 (variables -> variables , variable .)
    ,               reduce using rule 37 (variables -> variables , variable .)


state 134

    (44) matrix_element -> ID [ INTNUM . , INTNUM ]
    (43) vector_element -> ID [ INTNUM . ]
    ,               shift and go to state 114
    ]               shift and go to state 113


state 135

    (44) matrix_element -> ID [ INTNUM , INTNUM ] .
    =               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    /               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    *               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    -               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    +               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    '               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ,               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ;               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    >               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    <               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GREATER_EQUAL   reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LESS_EQUAL      reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    NOT_EQUAL       reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    EQUAL           reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    :               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    )               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    IF              reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    {               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ID              reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ]               reduce using rule 44 (matrix_element -> ID [ INTNUM , INTNUM ] .)


state 136

    (8) instruction -> IF ( condition ) instruction ELSE instruction .
    FOR             reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 8 (instruction -> IF ( condition ) instruction ELSE instruction .)
